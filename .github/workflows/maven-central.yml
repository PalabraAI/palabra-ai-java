name: Publish to Maven Central

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (must match GitHub release)'
        required: true
        type: string
      dry_run:
        description: 'Dry run (validate only, do not publish)'
        required: false
        default: false
        type: boolean

env:
  GRADLE_VERSION: 8.5

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.validate.outputs.proceed }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: v${{ github.event.inputs.version }}
        
    - name: Validate GitHub release exists
      id: validate
      uses: actions/github-script@v7
      with:
        script: |
          const version = '${{ github.event.inputs.version }}';
          
          try {
            // Check if release exists
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: `v${version}`
            });
            
            console.log(`‚úÖ Found GitHub release: ${release.data.name}`);
            
            // Check if already published to Maven Central
            const mavenCheckUrl = `https://search.maven.org/solrsearch/select?q=g:ai.palabra+AND+a:palabra-ai-java+AND+v:${version}`;
            const response = await fetch(mavenCheckUrl);
            const data = await response.json();
            
            if (data.response.numFound > 0) {
              console.log(`‚ö†Ô∏è Version ${version} already exists on Maven Central`);
              core.setOutput('proceed', 'false');
              core.setFailed(`Version ${version} already published to Maven Central`);
            } else {
              console.log(`‚úÖ Version ${version} not yet on Maven Central`);
              core.setOutput('proceed', 'true');
            }
            
          } catch (error) {
            console.error(`‚ùå GitHub release v${version} not found`);
            core.setOutput('proceed', 'false');
            core.setFailed(`GitHub release v${version} not found`);
          }

  setup-signing:
    name: Setup GPG Signing
    needs: validate-release
    if: needs.validate-release.outputs.proceed == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: v${{ github.event.inputs.version }}
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'gradle'
        
    - name: Import GPG key
      env:
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        echo "$GPG_PRIVATE_KEY" | base64 --decode | gpg --batch --import
        
        # List imported keys
        gpg --list-secret-keys --keyid-format LONG
        
        # Get the key ID
        KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep '^sec' | head -1 | awk '{print $2}' | cut -d'/' -f2)
        echo "GPG_KEY_ID=$KEY_ID" >> $GITHUB_ENV
        
        # Configure GPG
        echo "use-agent" >> ~/.gnupg/gpg.conf
        echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
        echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
        gpgconf --kill gpg-agent
        gpgconf --launch gpg-agent
        
    - name: Verify GPG setup
      run: |
        echo "Test signing" | gpg --armor --detach-sign --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}"
        echo "‚úÖ GPG signing configured successfully"

  publish-maven-central:
    name: Publish to Maven Central
    needs: [validate-release, setup-signing]
    if: needs.validate-release.outputs.proceed == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: v${{ github.event.inputs.version }}
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'gradle'
        
    - name: Import GPG key
      env:
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        echo "$GPG_PRIVATE_KEY" | base64 --decode | gpg --batch --import
        echo "use-agent" >> ~/.gnupg/gpg.conf
        echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
        echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
        gpgconf --kill gpg-agent
        gpgconf --launch gpg-agent
        
    - name: Update version
      run: |
        VERSION="${{ github.event.inputs.version }}"
        sed -i "s/version = \".*\"/version = \"$VERSION\"/" build.gradle.kts
        echo "üìù Set version to $VERSION"
        
    - name: Build artifacts
      run: |
        ./gradlew clean build -x test --no-daemon
        ./gradlew javadocJar sourcesJar --no-daemon
        
    - name: Configure Maven Central credentials
      run: |
        mkdir -p ~/.gradle
        cat > ~/.gradle/gradle.properties << EOF
        ossrhUsername=${{ secrets.MAVEN_CENTRAL_USERNAME }}
        ossrhPassword=${{ secrets.MAVEN_CENTRAL_PASSWORD }}
        signing.gnupg.executable=gpg
        signing.gnupg.useLegacyGpg=false
        signing.gnupg.passphrase=${{ secrets.GPG_PASSPHRASE }}
        signing.gnupg.keyName=${{ env.GPG_KEY_ID }}
        EOF
        
    - name: Dry run validation
      if: github.event.inputs.dry_run == 'true'
      run: |
        echo "üîç Running dry run validation..."
        ./gradlew publishToMavenLocal --no-daemon
        
        # Verify artifacts
        VERSION="${{ github.event.inputs.version }}"
        ls -la ~/.m2/repository/ai/palabra/palabra-ai-java/$VERSION/
        
        echo "‚úÖ Dry run completed successfully"
        echo "Artifacts validated but not published"
        
    - name: Publish to Maven Central
      if: github.event.inputs.dry_run == 'false'
      env:
        ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        echo "üì§ Publishing to Maven Central..."
        
        # Publish to staging repository
        ./gradlew publish --no-daemon
        
        echo "‚úÖ Published to staging repository"
        echo "‚è≥ Artifacts will be available on Maven Central within 30 minutes"
        
    - name: Verify publication
      if: github.event.inputs.dry_run == 'false'
      run: |
        VERSION="${{ github.event.inputs.version }}"
        
        echo "Waiting 5 minutes for initial sync..."
        sleep 300
        
        # Check if available on Maven Central
        MAVEN_URL="https://repo1.maven.org/maven2/ai/palabra/palabra-ai-java/$VERSION/"
        
        if curl --head --fail "$MAVEN_URL" 2>/dev/null; then
          echo "‚úÖ Version $VERSION is now available on Maven Central!"
          echo "URL: $MAVEN_URL"
        else
          echo "‚è≥ Version $VERSION is still syncing to Maven Central"
          echo "This can take up to 30 minutes. Please check:"
          echo "https://search.maven.org/artifact/ai.palabra/palabra-ai-java/$VERSION"
        fi
        
    - name: Create success comment
      if: github.event.inputs.dry_run == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          const version = '${{ github.event.inputs.version }}';
          
          // Find the release
          const release = await github.rest.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: `v${version}`
          });
          
          // Update release body with Maven Central info
          const currentBody = release.data.body || '';
          const mavenNote = `\n\n---\n### üì¶ Maven Central\nThis version is now available on Maven Central!\n\nMaven:\n\`\`\`xml\n<dependency>\n    <groupId>ai.palabra</groupId>\n    <artifactId>palabra-ai-java</artifactId>\n    <version>${version}</version>\n</dependency>\n\`\`\`\n\nGradle:\n\`\`\`gradle\nimplementation 'ai.palabra:palabra-ai-java:${version}'\n\`\`\``;
          
          if (!currentBody.includes('Maven Central')) {
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              body: currentBody + mavenNote
            });
            console.log('‚úÖ Updated release notes with Maven Central information');
          }